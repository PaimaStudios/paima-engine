module.exports = {
  extends: [
    'airbnb-typescript',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
    'plugin:import/typescript',
    'plugin:react-hooks/recommended',
    'prettier',
  ],
  rules: {
    '@typescript-eslint/no-unsafe-assignment': 'off',
    '@typescript-eslint/no-unsafe-return': 'off',
    '@typescript-eslint/require-await': 'off',
    '@typescript-eslint/no-unsafe-call': 'off',
    '@typescript-eslint/no-explicit-any': 'warn',
    '@typescript-eslint/restrict-template-expressions': 'off',
    '@typescript-eslint/no-unsafe-member-access': 'off',
    '@typescript-eslint/unbound-method': 'off',
    '@typescript-eslint/restrict-plus-operands': 'off',
    '@typescript-eslint/consistent-type-imports': [
      'error',
      {
        prefer: 'type-imports',
        disallowTypeAnnotations: false,
      },
    ],
    '@typescript-eslint/no-use-before-define': 'off',
    '@typescript-eslint/no-empty-interface': 'off',
    '@typescript-eslint/no-redeclare': 'off', // causes issues with if/else blocks
    '@typescript-eslint/no-shadow': 'off', // causes issues with if/else blocks
    '@typescript-eslint/no-inferrable-types': 'off', // pointlessly strict I think
    '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'default',
        format: null,
        leadingUnderscore: 'allow',
      },
      {
        selector: 'typeLike',
        format: ['PascalCase'],
        leadingUnderscore: 'allow',
      },
    ],
    '@typescript-eslint/return-await': ['error', 'always'],
    '@typescript-eslint/explicit-function-return-type': "error",
    'func-names': 'off',
    'new-cap': 'off',
    'arrow-parens': ['off'],
    'consistent-return': 'off',
    'comma-dangle': 'off',
    'generator-star-spacing': 'off',
    'import/no-extraneous-dependencies': 'off', // TODO: fix this for multirepo
    'import/no-dynamic-require': 'off',
    'import/no-named-as-default': 'off',
    'import/no-named-as-default-member': 'off',
    'import/prefer-default-export': 'off',
    'import/order': 'off',
    'lines-between-class-members': 'off',
    '@typescript-eslint/lines-between-class-members': 'off',
    'no-else-return': 'off',
    'no-lonely-if': 'off',
    'no-multiple-empty-lines': 'off',
    'no-multi-spaces': 'off',
    'no-restricted-imports': [
      'error',
      {
        paths: [
          {
            name: 'react-router-dom',
            importNames: ['useLocation', 'useHistory'],
            message: 'Use hookts.ts instead',
          },
          {
            name: 'react-redux',
            importNames: ['useDispatch', 'useSelector'],
            message: 'Use hookts.ts instead',
          },
        ],
      },
    ],
    'no-restricted-globals': 'off',
    'no-restricted-syntax': 'off',
    'no-return-await': 'off',
    'no-use-before-define': 'off',
    'no-useless-return': 'off',
    'object-curly-newline': 'off',
    'operator-linebreak': 0,
    'prefer-destructuring': 0,
    'promise/param-names': 2,
    'promise/always-return': 2,
    'promise/catch-or-return': 2,
    'promise/no-native': 0,
    'react/button-has-type': 1,
    'react/destructuring-assignment': 0,
    'react/no-array-index-key': 1,
    'react/jsx-no-bind': 'off',
    'react/jsx-filename-extension': ['error', { extensions: ['.js', '.jsx', '.ts', '.tsx'] }],
    'react/jsx-closing-bracket-location': 1,
    'react/jsx-one-expression-per-line': 'off',
    'react/jsx-wrap-multilines': 'off',
    'react/prefer-stateless-function': 'off',
    'react/no-unused-prop-types': 'off',
    'react/prop-types': 0,
    'react/require-default-props': 0,
    'react/sort-comp': 0,
    'react/static-property-placement': ['warn', 'static public field'],
    'react/state-in-constructor': ['warn', 'never'],
    'react/jsx-props-no-spreading': 0,
    'react/jsx-curly-newline': 0,
    'class-methods-use-this': 0,
    'no-continue': 0,
    'no-duplicate-imports': 0,
    'no-param-reassign': 0,
    'no-plusplus': 0,
    'no-bitwise': 0,
    'no-underscore-dangle': 0,
    'no-console': 1,
    'no-mixed-operators': 0,
    'no-multi-assign': 0,
    'no-unneeded-ternary': ['error', { defaultAssignment: true }],
    'un-undef-init': 0, // this rule can screw up type inference
    'no-void': [
      'error',
      {
        // useful to use an explicit void when ignore a floating promise
        allowAsStatement: true,
      },
    ],
    'prefer-template': 0,
    'no-trailing-spaces': 1,
    'padded-blocks': 0,
    'arrow-body-style': 0,
    'key-spacing': 1,
    'no-empty-function': 0, // replaced by @typescript-eslint/no-empty-function
    'no-useless-escape': 1,
    'prefer-const': 'off', // causes issues with let statements followed by block or try-catch
    'spaced-comment': 1,
    quotes: ['error', 'single', { avoidEscape: true, allowTemplateLiterals: true }],
    'import/imports-first': 1,
    'react/jsx-indent': 1,
    'global-require': 'off',
    'no-await-in-loop': 0,
    'no-unused-expressions': 0,
    'no-lone-blocks': 0,
    'max-classes-per-file': 0,
  },
  plugins: ['@typescript-eslint', 'import', 'promise', 'react', 'prettier'],
  root: true,
  parser: '@typescript-eslint/parser',
  ignorePatterns: [
    '.eslintrc.js',
    // won't work as it's ignored by the workspace-level tsconfig.json
    'admin-panel',
    '*.d.ts',
    '*.queries.ts'
  ],
};