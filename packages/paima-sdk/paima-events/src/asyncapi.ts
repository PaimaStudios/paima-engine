/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The object provides metadata about the API. The metadata can be used by the clients if needed.
 */
export type Info = {
  /**
   * A unique and precise title of the API.
   */
  title: string;
  /**
   * A semantic version number of the API.
   */
  version: string;
  /**
   * A longer description of the API. Should be different from the title. CommonMark is allowed.
   */
  description?: string;
  /**
   * A URL to the Terms of Service for the API. MUST be in the format of a URL.
   */
  termsOfService?: string;
  contact?: Contact;
  license?: License;
  /**
   * A list of tags for application API documentation control. Tags can be used for logical grouping of applications.
   */
  tags?: (Reference | Tag)[];
  externalDocs?: Reference | ExternalDocs;
} & InfoExtensions;
/**
 * This extension allows you to provide the Twitter username of the account representing the team/company of the API.
 */
export type ExtensionsX010Schema = string;
/**
 * This extension allows you to provide the Linkedin profile URL of the account representing the team/company of the API.
 */
export type ExtensionsLinkedin010Schema = string;
/**
 * Defines a security scheme that can be used by the operations.
 */
export type SecurityScheme =
  | UserPassword
  | ApiKey
  | X509
  | SymmetricEncryption
  | AsymmetricEncryption
  | HTTPSecurityScheme
  | Oauth2Flows
  | OpenIdConnect
  | SaslSecurityScheme;
export type HTTPSecurityScheme =
  | NonBearerHTTPSecurityScheme
  | BearerHTTPSecurityScheme
  | APIKeyHTTPSecurityScheme;
export type SaslSecurityScheme =
  | SaslPlainSecurityScheme
  | SaslScramSecurityScheme
  | SaslGssapiSecurityScheme;
/**
 * An array representing security requirements.
 */
export type SecurityRequirements = (Reference | SecurityScheme)[];
export type MessageExampleObject = MessageExampleObject1 & {
  /**
   * Machine readable name of the message example.
   */
  name?: string;
  /**
   * A brief summary of the message example.
   */
  summary?: string;
  /**
   * Example of the application headers. It can be of any type.
   */
  headers?: {
    [k: string]: unknown;
  };
  /**
   * Example of the message payload. It can be of any type.
   */
  payload?: {
    [k: string]: unknown;
  };
};
export type MessageExampleObject1 = {
  [k: string]: unknown;
};
/**
 * A declaration of which security schemes are associated with this operation. Only one of the security scheme objects MUST be satisfied to authorize an operation. In cases where Server Security also applies, it MUST also be satisfied.
 */
export type Security = (Reference | SecurityScheme)[];
/**
 * A list of tags for logical grouping and categorization of operations.
 */
export type Tags = (Reference | Tag)[];

/**
 * !!Auto generated!!
 *  Do not manually edit.
 */
export interface AsyncAPI300Schema {
  /**
   * The AsyncAPI specification version of this document.
   */
  asyncapi: '3.0.0';
  /**
   * A unique id representing the application.
   */
  id?: string;
  info: Info;
  servers?: Servers;
  /**
   * Default content type to use when encoding/decoding a message's payload.
   */
  defaultContentType?: string;
  channels?: Channels;
  operations?: Operations;
  components?: Components;
}
/**
 * Contact information for the exposed API.
 */
export interface Contact {
  /**
   * The identifying name of the contact person/organization.
   */
  name?: string;
  /**
   * The URL pointing to the contact information.
   */
  url?: string;
  /**
   * The email address of the contact person/organization.
   */
  email?: string;
}
/**
 * Any property starting with x- is valid.
 *
 * This interface was referenced by `Contact`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `License`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `ExternalDocs`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `Tag`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `ServerVariable`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `UserPassword`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `ApiKey`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `X509`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `SymmetricEncryption`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `AsymmetricEncryption`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `NonBearerHTTPSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `BearerHTTPSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `APIKeyHTTPSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `Oauth2Flow`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `Oauth2Flows`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `OpenIdConnect`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `SaslPlainSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `SaslScramSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `SaslGssapiSecurityScheme`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `ServerBindingsObject`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `Server`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `CorrelationId`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `MessageBindingsObject`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `MessageTrait`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `MessageObject`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `Parameter`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `ChannelBindingsObject`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `Channel`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `OperationReplyAddress`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `OperationReply`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `OperationBindingsObject`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `OperationTrait`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `Operation`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `Components`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 *
 * This interface was referenced by `AsyncAPI300Schema`'s JSON-Schema definition
 * via the `patternProperty` "^x-[\w\d\.\x2d_]+$".
 */
export interface SpecificationExtension {
  [k: string]: unknown;
}
export interface License {
  /**
   * The name of the license type. It's encouraged to use an OSI compatible license.
   */
  name: string;
  /**
   * The URL pointing to the license.
   */
  url?: string;
}
/**
 * A simple object to allow referencing other components in the specification, internally and externally.
 */
export interface Reference {
  /**
   * The reference string.
   */
  $ref: string;
}
/**
 * Allows adding metadata to a single tag.
 */
export interface Tag {
  /**
   * The name of the tag.
   */
  name: string;
  /**
   * A short description for the tag. CommonMark syntax can be used for rich text representation.
   */
  description?: string;
  externalDocs?: Reference | ExternalDocs;
}
/**
 * Allows referencing an external resource for extended documentation.
 */
export interface ExternalDocs {
  /**
   * A short description of the target documentation. CommonMark syntax can be used for rich text representation.
   */
  description?: string;
  /**
   * The URL for the target documentation. This MUST be in the form of an absolute URL.
   */
  url: string;
}
/**
 * The object that lists all the extensions of Info
 */
export interface InfoExtensions {
  'x-x'?: ExtensionsX010Schema;
  'x-linkedin'?: ExtensionsLinkedin010Schema;
  [k: string]: unknown;
}
/**
 * An object representing multiple servers.
 */
export interface Servers {
  [k: string]: Reference | Server;
}
/**
 * An object representing a message broker, a server or any other kind of computer program capable of sending and/or receiving data.
 */
export interface Server {
  /**
   * The server host name. It MAY include the port. This field supports Server Variables. Variable substitutions will be made when a variable is named in {braces}.
   */
  host: string;
  /**
   * The path to a resource in the host. This field supports Server Variables. Variable substitutions will be made when a variable is named in {braces}.
   */
  pathname?: string;
  /**
   * A human-friendly title for the server.
   */
  title?: string;
  /**
   * A brief summary of the server.
   */
  summary?: string;
  /**
   * A longer description of the server. CommonMark is allowed.
   */
  description?: string;
  /**
   * The protocol this server supports for connection.
   */
  protocol: string;
  /**
   * An optional string describing the server. CommonMark syntax MAY be used for rich text representation.
   */
  protocolVersion?: string;
  variables?: ServerVariables;
  security?: SecurityRequirements;
  tags?: (Reference | Tag)[];
  externalDocs?: Reference | ExternalDocs;
  bindings?: Reference | ServerBindingsObject;
}
export interface ServerVariables {
  [k: string]: Reference | ServerVariable;
}
/**
 * An object representing a Server Variable for server URL template substitution.
 */
export interface ServerVariable {
  /**
   * An enumeration of string values to be used if the substitution options are from a limited set.
   */
  enum?: string[];
  /**
   * The default value to use for substitution, and to send, if an alternate value is not supplied.
   */
  default?: string;
  /**
   * An optional description for the server variable. CommonMark syntax MAY be used for rich text representation.
   */
  description?: string;
  /**
   * An array of examples of the server variable.
   */
  examples?: string[];
}
export interface UserPassword {
  type: 'userPassword';
  description?: string;
}
export interface ApiKey {
  /**
   * The type of the security scheme
   */
  type: 'apiKey';
  /**
   *  The location of the API key.
   */
  in: 'user' | 'password';
  /**
   * A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
   */
  description?: string;
}
export interface X509 {
  type: 'X509';
  description?: string;
}
export interface SymmetricEncryption {
  type: 'symmetricEncryption';
  description?: string;
}
export interface AsymmetricEncryption {
  /**
   * The type of the security scheme.
   */
  type: 'asymmetricEncryption';
  /**
   * A short description for security scheme.
   */
  description?: string;
}
export interface NonBearerHTTPSecurityScheme {
  /**
   * The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
   */
  scheme: string;
  /**
   * A short description for security scheme.
   */
  description?: string;
  /**
   * The type of the security scheme.
   */
  type: 'http';
}
export interface BearerHTTPSecurityScheme {
  /**
   * The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
   */
  scheme: 'bearer';
  /**
   * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
   */
  bearerFormat?: string;
  /**
   * The type of the security scheme.
   */
  type: 'http';
  /**
   * A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
   */
  description?: string;
}
export interface APIKeyHTTPSecurityScheme {
  /**
   * The type of the security scheme.
   */
  type: 'httpApiKey';
  /**
   * The name of the header, query or cookie parameter to be used.
   */
  name: string;
  /**
   * The location of the API key
   */
  in: 'header' | 'query' | 'cookie';
  /**
   * A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
   */
  description?: string;
}
/**
 * Allows configuration of the supported OAuth Flows.
 */
export interface Oauth2Flows {
  /**
   * The type of the security scheme.
   */
  type: 'oauth2';
  /**
   * A short description for security scheme.
   */
  description?: string;
  flows: {
    /**
     * Configuration for the OAuth Implicit flow.
     */
    implicit?: Oauth2Flow & {
      [k: string]: unknown;
    };
    /**
     * Configuration for the OAuth Resource Owner Protected Credentials flow.
     */
    password?: Oauth2Flow & {
      [k: string]: unknown;
    };
    /**
     * Configuration for the OAuth Client Credentials flow.
     */
    clientCredentials?: Oauth2Flow & {
      [k: string]: unknown;
    };
    /**
     * Configuration for the OAuth Authorization Code flow.
     */
    authorizationCode?: Oauth2Flow & {
      [k: string]: unknown;
    };
  };
  /**
   * List of the needed scope names.
   */
  scopes?: string[];
}
/**
 * Configuration details for a supported OAuth Flow
 */
export interface Oauth2Flow {
  /**
   * The authorization URL to be used for this flow. This MUST be in the form of an absolute URL.
   */
  authorizationUrl?: string;
  /**
   * The token URL to be used for this flow. This MUST be in the form of an absolute URL.
   */
  tokenUrl?: string;
  /**
   * The URL to be used for obtaining refresh tokens. This MUST be in the form of an absolute URL.
   */
  refreshUrl?: string;
  availableScopes?: Oauth2Scopes;
}
/**
 * The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it.
 */
export interface Oauth2Scopes {
  [k: string]: string;
}
export interface OpenIdConnect {
  /**
   * The type of the security scheme.
   */
  type: 'openIdConnect';
  /**
   * A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
   */
  description?: string;
  /**
   * OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of an absolute URL.
   */
  openIdConnectUrl: string;
  /**
   * List of the needed scope names. An empty array means no scopes are needed.
   */
  scopes?: string[];
}
export interface SaslPlainSecurityScheme {
  /**
   * The type of the security scheme. Valid values
   */
  type: 'plain';
  /**
   * A short description for security scheme.
   */
  description?: string;
}
export interface SaslScramSecurityScheme {
  /**
   * The type of the security scheme.
   */
  type: 'scramSha256' | 'scramSha512';
  /**
   * A short description for security scheme.
   */
  description?: string;
}
export interface SaslGssapiSecurityScheme {
  /**
   * The type of the security scheme.
   */
  type: 'gssapi';
  /**
   * A short description for security scheme.
   */
  description?: string;
}
/**
 * Map describing protocol-specific definitions for a server.
 */
export interface ServerBindingsObject {
  http?: unknown;
  ws?: unknown;
  amqp?: unknown;
  amqp1?: unknown;
  mqtt?: {
    [k: string]: unknown;
  };
  kafka?: {
    [k: string]: unknown;
  };
  anypointmq?: unknown;
  nats?: unknown;
  jms?: {
    [k: string]: unknown;
  };
  sns?: unknown;
  sqs?: unknown;
  stomp?: unknown;
  redis?: unknown;
  ibmmq?: {
    [k: string]: unknown;
  };
  solace?: {
    [k: string]: unknown;
  };
  googlepubsub?: unknown;
  pulsar?: {
    [k: string]: unknown;
  };
}
/**
 * An object containing all the Channel Object definitions the Application MUST use during runtime.
 */
export interface Channels {
  [k: string]: Reference | Channel;
}
/**
 * Describes a shared communication channel.
 */
export interface Channel {
  /**
   * An optional string representation of this channel's address. The address is typically the "topic name", "routing key", "event type", or "path". When `null` or absent, it MUST be interpreted as unknown. This is useful when the address is generated dynamically at runtime or can't be known upfront. It MAY contain Channel Address Expressions.
   */
  address?: string | null;
  messages?: ChannelMessages;
  parameters?: Parameters;
  /**
   * A human-friendly title for the channel.
   */
  title?: string;
  /**
   * A brief summary of the channel.
   */
  summary?: string;
  /**
   * A longer description of the channel. CommonMark is allowed.
   */
  description?: string;
  /**
   * The references of the servers on which this channel is available. If absent or empty then this channel must be available on all servers.
   */
  servers?: Reference[];
  /**
   * A list of tags for logical grouping of channels.
   */
  tags?: (Reference | Tag)[];
  externalDocs?: Reference | ExternalDocs;
  bindings?: Reference | ChannelBindingsObject;
}
/**
 * A map of the messages that will be sent to this channel by any application at any time. **Every message sent to this channel MUST be valid against one, and only one, of the message objects defined in this map.**
 */
export interface ChannelMessages {
  [k: string]: Reference | MessageObject;
}
/**
 * Describes a message received on a given channel and operation.
 */
export interface MessageObject {
  /**
   * The content type to use when encoding/decoding a message's payload. The value MUST be a specific media type (e.g. application/json). When omitted, the value MUST be the one specified on the defaultContentType field.
   */
  contentType?: string;
  headers?: AnySchema;
  payload?: AnySchema;
  correlationId?: Reference | CorrelationId;
  tags?: (Reference | Tag)[];
  /**
   * A brief summary of the message.
   */
  summary?: string;
  /**
   * Name of the message.
   */
  name?: string;
  /**
   * A human-friendly title for the message.
   */
  title?: string;
  /**
   * A longer description of the message. CommonMark is allowed.
   */
  description?: string;
  externalDocs?: Reference | ExternalDocs;
  deprecated?: boolean;
  /**
   * List of examples.
   */
  examples?: MessageExampleObject[];
  bindings?: Reference | MessageBindingsObject;
  /**
   * A list of traits to apply to the message object. Traits MUST be merged using traits merge mechanism. The resulting object MUST be a valid Message Object.
   */
  traits?: (
    | Reference
    | MessageTrait
    | []
    | [Reference | MessageTrait]
    | [
        Reference | MessageTrait,
        {
          [k: string]: unknown;
        },
      ]
  )[];
}
/**
 * An object representing either a schema or a multiFormatSchema based on the existence of the 'schema' property. If the property 'schema' is present, use the multi-format schema. Use the default AsyncAPI Schema otherwise.
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[\w\d\.\-_]+$".
 */
export interface AnySchema {
  [k: string]: unknown;
}
/**
 * An object that specifies an identifier at design time that can used for message tracing and correlation.
 */
export interface CorrelationId {
  /**
   * A optional description of the correlation ID. GitHub Flavored Markdown is allowed.
   */
  description?: string;
  /**
   * A runtime expression that specifies the location of the correlation ID
   */
  location: string;
}
/**
 * Map describing protocol-specific definitions for a message.
 */
export interface MessageBindingsObject {
  http?: {
    [k: string]: unknown;
  };
  ws?: unknown;
  amqp?: {
    [k: string]: unknown;
  };
  amqp1?: unknown;
  mqtt?: {
    [k: string]: unknown;
  };
  kafka?: {
    [k: string]: unknown;
  };
  anypointmq?: {
    [k: string]: unknown;
  };
  nats?: unknown;
  jms?: {
    [k: string]: unknown;
  };
  sns?: unknown;
  sqs?: unknown;
  stomp?: unknown;
  redis?: unknown;
  ibmmq?: {
    [k: string]: unknown;
  };
  solace?: unknown;
  googlepubsub?: {
    [k: string]: unknown;
  };
}
/**
 * Describes a trait that MAY be applied to a Message Object. This object MAY contain any property from the Message Object, except payload and traits.
 */
export interface MessageTrait {
  /**
   * The content type to use when encoding/decoding a message's payload. The value MUST be a specific media type (e.g. application/json). When omitted, the value MUST be the one specified on the defaultContentType field.
   */
  contentType?: string;
  headers?: AnySchema;
  correlationId?: Reference | CorrelationId;
  tags?: (Reference | Tag)[];
  /**
   * A brief summary of the message.
   */
  summary?: string;
  /**
   * Name of the message.
   */
  name?: string;
  /**
   * A human-friendly title for the message.
   */
  title?: string;
  /**
   * A longer description of the message. CommonMark is allowed.
   */
  description?: string;
  externalDocs?: Reference | ExternalDocs;
  deprecated?: boolean;
  /**
   * List of examples.
   */
  examples?: MessageExampleObject[];
  bindings?: Reference | MessageBindingsObject;
}
/**
 * JSON objects describing re-usable channel parameters.
 */
export interface Parameters {
  [k: string]: Reference | Parameter;
}
/**
 * Describes a parameter included in a channel address.
 */
export interface Parameter {
  /**
   * A brief description of the parameter. This could contain examples of use. GitHub Flavored Markdown is allowed.
   */
  description?: string;
  /**
   * An enumeration of string values to be used if the substitution options are from a limited set.
   */
  enum?: string[];
  /**
   * The default value to use for substitution, and to send, if an alternate value is not supplied.
   */
  default?: string;
  /**
   * An array of examples of the parameter value.
   */
  examples?: string[];
  /**
   * A runtime expression that specifies the location of the parameter value
   */
  location?: string;
}
/**
 * Map describing protocol-specific definitions for a channel.
 */
export interface ChannelBindingsObject {
  http?: unknown;
  ws?: {
    [k: string]: unknown;
  };
  amqp?: {
    [k: string]: unknown;
  };
  amqp1?: unknown;
  mqtt?: unknown;
  kafka?: {
    [k: string]: unknown;
  };
  anypointmq?: {
    [k: string]: unknown;
  };
  nats?: unknown;
  jms?: {
    [k: string]: unknown;
  };
  sns?: {
    [k: string]: unknown;
  };
  sqs?: {
    [k: string]: unknown;
  };
  stomp?: unknown;
  redis?: unknown;
  ibmmq?: {
    [k: string]: unknown;
  };
  solace?: unknown;
  googlepubsub?: {
    [k: string]: unknown;
  };
  pulsar?: {
    [k: string]: unknown;
  };
}
/**
 * Holds a dictionary with all the operations this application MUST implement.
 */
export interface Operations {
  [k: string]: Reference | Operation;
}
/**
 * Describes a specific operation.
 */
export interface Operation {
  /**
   * Allowed values are send and receive. Use send when it's expected that the application will send a message to the given channel, and receive when the application should expect receiving messages from the given channel.
   */
  action: 'send' | 'receive';
  channel: Reference;
  /**
   * A list of $ref pointers pointing to the supported Message Objects that can be processed by this operation. It MUST contain a subset of the messages defined in the channel referenced in this operation. Every message processed by this operation MUST be valid against one, and only one, of the message objects referenced in this list. Please note the messages property value MUST be a list of Reference Objects and, therefore, MUST NOT contain Message Objects. However, it is RECOMMENDED that parsers (or other software) dereference this property for a better development experience.
   */
  messages?: Reference[];
  reply?: Reference | OperationReply;
  /**
   * A list of traits to apply to the operation object. Traits MUST be merged using traits merge mechanism. The resulting object MUST be a valid Operation Object.
   */
  traits?: (Reference | OperationTrait)[];
  /**
   * A human-friendly title for the operation.
   */
  title?: string;
  /**
   * A brief summary of the operation.
   */
  summary?: string;
  /**
   * A longer description of the operation. CommonMark is allowed.
   */
  description?: string;
  security?: SecurityRequirements;
  /**
   * A list of tags for logical grouping and categorization of operations.
   */
  tags?: (Reference | Tag)[];
  externalDocs?: Reference | ExternalDocs;
  bindings?: Reference | OperationBindingsObject;
}
/**
 * Describes the reply part that MAY be applied to an Operation Object. If an operation implements the request/reply pattern, the reply object represents the response message.
 */
export interface OperationReply {
  address?: Reference | OperationReplyAddress;
  channel?: Reference;
  /**
   * A list of $ref pointers pointing to the supported Message Objects that can be processed by this operation as reply. It MUST contain a subset of the messages defined in the channel referenced in this operation reply. Every message processed by this operation MUST be valid against one, and only one, of the message objects referenced in this list. Please note the messages property value MUST be a list of Reference Objects and, therefore, MUST NOT contain Message Objects. However, it is RECOMMENDED that parsers (or other software) dereference this property for a better development experience.
   */
  messages?: Reference[];
}
/**
 * An object that specifies where an operation has to send the reply
 */
export interface OperationReplyAddress {
  /**
   * A runtime expression that specifies the location of the reply address.
   */
  location: string;
  /**
   * An optional description of the address. CommonMark is allowed.
   */
  description?: string;
}
/**
 * Describes a trait that MAY be applied to an Operation Object. This object MAY contain any property from the Operation Object, except the action, channel and traits ones.
 */
export interface OperationTrait {
  /**
   * A human-friendly title for the operation.
   */
  title?: string;
  /**
   * A short summary of what the operation is about.
   */
  summary?: string;
  /**
   * A verbose explanation of the operation. CommonMark syntax can be used for rich text representation.
   */
  description?: string;
  security?: Security;
  tags?: Tags;
  /**
   * Additional external documentation for this operation.
   */
  externalDocs?: Reference | ExternalDocs;
  /**
   * A map where the keys describe the name of the protocol and the values describe protocol-specific definitions for the operation.
   */
  bindings?: Reference | OperationBindingsObject;
}
/**
 * Map describing protocol-specific definitions for an operation.
 */
export interface OperationBindingsObject {
  http?: {
    [k: string]: unknown;
  };
  ws?: unknown;
  amqp?: {
    [k: string]: unknown;
  };
  amqp1?: unknown;
  mqtt?: {
    [k: string]: unknown;
  };
  kafka?: {
    [k: string]: unknown;
  };
  anypointmq?: unknown;
  nats?: {
    [k: string]: unknown;
  };
  jms?: unknown;
  sns?: {
    [k: string]: unknown;
  };
  sqs?: {
    [k: string]: unknown;
  };
  stomp?: unknown;
  redis?: unknown;
  ibmmq?: unknown;
  solace?: {
    [k: string]: unknown;
  };
  googlepubsub?: unknown;
}
/**
 * An object to hold a set of reusable objects for different aspects of the AsyncAPI specification. All objects defined within the components object will have no effect on the API unless they are explicitly referenced from properties outside the components object.
 */
export interface Components {
  /**
   * An object to hold reusable Schema Object. If this is a Schema Object, then the schemaFormat will be assumed to be 'application/vnd.aai.asyncapi+json;version=asyncapi' where the version is equal to the AsyncAPI Version String.
   */
  schemas?: {
    [k: string]: AnySchema;
  };
  /**
   * An object to hold reusable Server Objects.
   */
  servers?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | Server;
  };
  /**
   * An object to hold reusable Channel Objects.
   */
  channels?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | Channel;
  };
  /**
   * An object to hold reusable Server Variable Objects.
   */
  serverVariables?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | ServerVariable;
  };
  operations?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | Operation;
  };
  /**
   * An object to hold reusable Message Objects.
   */
  messages?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | MessageObject;
  };
  /**
   * An object to hold reusable Security Scheme Objects.
   */
  securitySchemes?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | SecurityScheme;
  };
  /**
   * An object to hold reusable Parameter Objects.
   */
  parameters?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | Parameter;
  };
  /**
   * An object to hold reusable Correlation ID Objects.
   */
  correlationIds?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | CorrelationId;
  };
  /**
   * An object to hold reusable Operation Trait Objects.
   */
  operationTraits?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | OperationTrait;
  };
  /**
   * An object to hold reusable Message Trait Objects.
   */
  messageTraits?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | MessageTrait;
  };
  /**
   * An object to hold reusable Operation Reply Objects.
   */
  replies?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | OperationReply;
  };
  /**
   * An object to hold reusable Operation Reply Address Objects.
   */
  replyAddresses?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | OperationReplyAddress;
  };
  /**
   * An object to hold reusable Server Bindings Objects.
   */
  serverBindings?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | ServerBindingsObject;
  };
  /**
   * An object to hold reusable Channel Bindings Objects.
   */
  channelBindings?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | ChannelBindingsObject;
  };
  /**
   * An object to hold reusable Operation Bindings Objects.
   */
  operationBindings?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | OperationBindingsObject;
  };
  /**
   * An object to hold reusable Message Bindings Objects.
   */
  messageBindings?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | MessageBindingsObject;
  };
  /**
   * An object to hold reusable Tag Objects.
   */
  tags?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | Tag;
  };
  /**
   * An object to hold reusable External Documentation Objects.
   */
  externalDocs?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[\w\d\.\-_]+$".
     */
    [k: string]: Reference | ExternalDocs;
  };
}
